/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { EulStakes, EulStakesInterface } from "../../mining/EulStakes";

const _abi = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        type: "address",
        name: "eul_",
        internalType: "address",
      },
    ],
  },
  {
    anonymous: false,
    type: "event",
    name: "Stake",
    inputs: [
      {
        type: "address",
        indexed: true,
        name: "who",
        internalType: "address",
      },
      {
        name: "underlying",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        indexed: false,
        type: "address",
        name: "sender",
        internalType: "address",
      },
      {
        type: "uint256",
        name: "newAmount",
        internalType: "uint256",
        indexed: false,
      },
    ],
  },
  {
    name: "eul",
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "address",
        name: "",
        internalType: "address",
      },
    ],
    inputs: [],
  },
  {
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    type: "function",
    stateMutability: "view",
    name: "name",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    name: "stake",
    inputs: [
      {
        components: [
          {
            internalType: "address",
            type: "address",
            name: "underlying",
          },
          {
            internalType: "int256",
            type: "int256",
            name: "amount",
          },
        ],
        type: "tuple[]",
        name: "ops",
        internalType: "struct EulStakes.StakeOp[]",
      },
    ],
    outputs: [],
  },
  {
    inputs: [
      {
        type: "address",
        internalType: "address",
        name: "beneficiary",
      },
      {
        type: "address",
        internalType: "address",
        name: "underlying",
      },
      {
        type: "uint256",
        internalType: "uint256",
        name: "amount",
      },
    ],
    outputs: [],
    type: "function",
    name: "stakeGift",
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    name: "stakePermit",
    inputs: [
      {
        components: [
          {
            type: "address",
            internalType: "address",
            name: "underlying",
          },
          {
            name: "amount",
            type: "int256",
            internalType: "int256",
          },
        ],
        type: "tuple[]",
        name: "ops",
        internalType: "struct EulStakes.StakeOp[]",
      },
      {
        type: "uint256",
        name: "value",
        internalType: "uint256",
      },
      {
        name: "deadline",
        type: "uint256",
        internalType: "uint256",
      },
      {
        type: "uint8",
        name: "v",
        internalType: "uint8",
      },
      {
        type: "bytes32",
        internalType: "bytes32",
        name: "r",
      },
      {
        type: "bytes32",
        internalType: "bytes32",
        name: "s",
      },
    ],
    outputs: [],
  },
  {
    inputs: [
      {
        internalType: "address",
        type: "address",
        name: "account",
      },
      {
        type: "address",
        internalType: "address",
        name: "underlying",
      },
    ],
    outputs: [
      {
        type: "uint256",
        internalType: "uint256",
        name: "",
      },
    ],
    name: "staked",
    type: "function",
    stateMutability: "view",
  },
];

export class EulStakes__factory {
  static readonly abi = _abi;
  static createInterface(): EulStakesInterface {
    return new utils.Interface(_abi) as EulStakesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EulStakes {
    return new Contract(address, _abi, signerOrProvider) as EulStakes;
  }
}
