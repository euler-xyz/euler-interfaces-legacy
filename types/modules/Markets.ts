/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace Storage {
  export type AssetConfigStruct = {
    eTokenAddress: string;
    borrowIsolated: boolean;
    collateralFactor: BigNumberish;
    borrowFactor: BigNumberish;
    twapWindow: BigNumberish;
  };

  export type AssetConfigStructOutput = [
    string,
    boolean,
    number,
    number,
    number
  ] & {
    eTokenAddress: string;
    borrowIsolated: boolean;
    collateralFactor: number;
    borrowFactor: number;
    twapWindow: number;
  };
}

export interface MarketsInterface extends utils.Interface {
  functions: {
    "activateMarket(address)": FunctionFragment;
    "activatePToken(address)": FunctionFragment;
    "dTokenToUnderlying(address)": FunctionFragment;
    "eTokenToDToken(address)": FunctionFragment;
    "eTokenToUnderlying(address)": FunctionFragment;
    "enterMarket(uint256,address)": FunctionFragment;
    "exitMarket(uint256,address)": FunctionFragment;
    "getChainlinkPriceFeedConfig(address)": FunctionFragment;
    "getEnteredMarkets(address)": FunctionFragment;
    "getPricingConfig(address)": FunctionFragment;
    "interestAccumulator(address)": FunctionFragment;
    "interestRate(address)": FunctionFragment;
    "interestRateModel(address)": FunctionFragment;
    "moduleGitCommit()": FunctionFragment;
    "moduleId()": FunctionFragment;
    "reserveFee(address)": FunctionFragment;
    "underlyingToAssetConfig(address)": FunctionFragment;
    "underlyingToAssetConfigUnresolved(address)": FunctionFragment;
    "underlyingToDToken(address)": FunctionFragment;
    "underlyingToEToken(address)": FunctionFragment;
    "underlyingToPToken(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activateMarket"
      | "activatePToken"
      | "dTokenToUnderlying"
      | "eTokenToDToken"
      | "eTokenToUnderlying"
      | "enterMarket"
      | "exitMarket"
      | "getChainlinkPriceFeedConfig"
      | "getEnteredMarkets"
      | "getPricingConfig"
      | "interestAccumulator"
      | "interestRate"
      | "interestRateModel"
      | "moduleGitCommit"
      | "moduleId"
      | "reserveFee"
      | "underlyingToAssetConfig"
      | "underlyingToAssetConfigUnresolved"
      | "underlyingToDToken"
      | "underlyingToEToken"
      | "underlyingToPToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activateMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "activatePToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "dTokenToUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "eTokenToDToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "eTokenToUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enterMarket",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "exitMarket",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainlinkPriceFeedConfig",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEnteredMarkets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPricingConfig",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "interestAccumulator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRateModel",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "moduleGitCommit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "moduleId", values?: undefined): string;
  encodeFunctionData(functionFragment: "reserveFee", values: [string]): string;
  encodeFunctionData(
    functionFragment: "underlyingToAssetConfig",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToAssetConfigUnresolved",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToDToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToEToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToPToken",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activatePToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dTokenToUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eTokenToDToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eTokenToUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChainlinkPriceFeedConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnteredMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPricingConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestAccumulator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moduleGitCommit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "moduleId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserveFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToAssetConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToAssetConfigUnresolved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToDToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToEToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToPToken",
    data: BytesLike
  ): Result;

  events: {
    "AssetStatus(address,uint256,uint256,uint96,uint256,uint256,int96,uint256)": EventFragment;
    "Borrow(address,address,uint256)": EventFragment;
    "DelegateAverageLiquidity(address,address)": EventFragment;
    "Deposit(address,address,uint256)": EventFragment;
    "EnterMarket(address,address)": EventFragment;
    "ExitMarket(address,address)": EventFragment;
    "Genesis()": EventFragment;
    "GovConvertReserves(address,address,uint256)": EventFragment;
    "GovSetAssetConfig(address,tuple)": EventFragment;
    "GovSetChainlinkPriceFeed(address,address)": EventFragment;
    "GovSetIRM(address,uint256,bytes)": EventFragment;
    "GovSetPricingConfig(address,uint16,uint32)": EventFragment;
    "GovSetReserveFee(address,uint32)": EventFragment;
    "InstallerInstallModule(uint256,address,bytes32)": EventFragment;
    "InstallerSetGovernorAdmin(address)": EventFragment;
    "InstallerSetUpgradeAdmin(address)": EventFragment;
    "Liquidation(address,address,address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "MarketActivated(address,address,address)": EventFragment;
    "PTokenActivated(address,address)": EventFragment;
    "PTokenUnWrap(address,address,uint256)": EventFragment;
    "PTokenWrap(address,address,uint256)": EventFragment;
    "ProxyCreated(address,uint256)": EventFragment;
    "Repay(address,address,uint256)": EventFragment;
    "RequestBorrow(address,uint256)": EventFragment;
    "RequestBurn(address,uint256)": EventFragment;
    "RequestDeposit(address,uint256)": EventFragment;
    "RequestDonate(address,uint256)": EventFragment;
    "RequestLiquidate(address,address,address,address,uint256,uint256)": EventFragment;
    "RequestMint(address,uint256)": EventFragment;
    "RequestRepay(address,uint256)": EventFragment;
    "RequestSwap(address,address,address,address,uint256,uint256)": EventFragment;
    "RequestTransferDToken(address,address,uint256)": EventFragment;
    "RequestTransferEToken(address,address,uint256)": EventFragment;
    "RequestWithdraw(address,uint256)": EventFragment;
    "TrackAverageLiquidity(address)": EventFragment;
    "UnTrackAverageLiquidity(address)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateAverageLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnterMarket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitMarket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Genesis"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovConvertReserves"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovSetAssetConfig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovSetChainlinkPriceFeed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovSetIRM"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovSetPricingConfig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovSetReserveFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstallerInstallModule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstallerSetGovernorAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstallerSetUpgradeAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PTokenActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PTokenUnWrap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PTokenWrap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestBorrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestDonate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestLiquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestRepay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestTransferDToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestTransferEToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrackAverageLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnTrackAverageLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface AssetStatusEventObject {
  underlying: string;
  totalBalances: BigNumber;
  totalBorrows: BigNumber;
  reserveBalance: BigNumber;
  poolSize: BigNumber;
  interestAccumulator: BigNumber;
  interestRate: BigNumber;
  timestamp: BigNumber;
}
export type AssetStatusEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  AssetStatusEventObject
>;

export type AssetStatusEventFilter = TypedEventFilter<AssetStatusEvent>;

export interface BorrowEventObject {
  underlying: string;
  account: string;
  amount: BigNumber;
}
export type BorrowEvent = TypedEvent<
  [string, string, BigNumber],
  BorrowEventObject
>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface DelegateAverageLiquidityEventObject {
  account: string;
  delegate: string;
}
export type DelegateAverageLiquidityEvent = TypedEvent<
  [string, string],
  DelegateAverageLiquidityEventObject
>;

export type DelegateAverageLiquidityEventFilter =
  TypedEventFilter<DelegateAverageLiquidityEvent>;

export interface DepositEventObject {
  underlying: string;
  account: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EnterMarketEventObject {
  underlying: string;
  account: string;
}
export type EnterMarketEvent = TypedEvent<
  [string, string],
  EnterMarketEventObject
>;

export type EnterMarketEventFilter = TypedEventFilter<EnterMarketEvent>;

export interface ExitMarketEventObject {
  underlying: string;
  account: string;
}
export type ExitMarketEvent = TypedEvent<
  [string, string],
  ExitMarketEventObject
>;

export type ExitMarketEventFilter = TypedEventFilter<ExitMarketEvent>;

export interface GenesisEventObject {}
export type GenesisEvent = TypedEvent<[], GenesisEventObject>;

export type GenesisEventFilter = TypedEventFilter<GenesisEvent>;

export interface GovConvertReservesEventObject {
  underlying: string;
  recipient: string;
  amount: BigNumber;
}
export type GovConvertReservesEvent = TypedEvent<
  [string, string, BigNumber],
  GovConvertReservesEventObject
>;

export type GovConvertReservesEventFilter =
  TypedEventFilter<GovConvertReservesEvent>;

export interface GovSetAssetConfigEventObject {
  underlying: string;
  newConfig: Storage.AssetConfigStructOutput;
}
export type GovSetAssetConfigEvent = TypedEvent<
  [string, Storage.AssetConfigStructOutput],
  GovSetAssetConfigEventObject
>;

export type GovSetAssetConfigEventFilter =
  TypedEventFilter<GovSetAssetConfigEvent>;

export interface GovSetChainlinkPriceFeedEventObject {
  underlying: string;
  chainlinkAggregator: string;
}
export type GovSetChainlinkPriceFeedEvent = TypedEvent<
  [string, string],
  GovSetChainlinkPriceFeedEventObject
>;

export type GovSetChainlinkPriceFeedEventFilter =
  TypedEventFilter<GovSetChainlinkPriceFeedEvent>;

export interface GovSetIRMEventObject {
  underlying: string;
  interestRateModel: BigNumber;
  resetParams: string;
}
export type GovSetIRMEvent = TypedEvent<
  [string, BigNumber, string],
  GovSetIRMEventObject
>;

export type GovSetIRMEventFilter = TypedEventFilter<GovSetIRMEvent>;

export interface GovSetPricingConfigEventObject {
  underlying: string;
  newPricingType: number;
  newPricingParameter: number;
}
export type GovSetPricingConfigEvent = TypedEvent<
  [string, number, number],
  GovSetPricingConfigEventObject
>;

export type GovSetPricingConfigEventFilter =
  TypedEventFilter<GovSetPricingConfigEvent>;

export interface GovSetReserveFeeEventObject {
  underlying: string;
  newReserveFee: number;
}
export type GovSetReserveFeeEvent = TypedEvent<
  [string, number],
  GovSetReserveFeeEventObject
>;

export type GovSetReserveFeeEventFilter =
  TypedEventFilter<GovSetReserveFeeEvent>;

export interface InstallerInstallModuleEventObject {
  moduleId: BigNumber;
  moduleImpl: string;
  moduleGitCommit: string;
}
export type InstallerInstallModuleEvent = TypedEvent<
  [BigNumber, string, string],
  InstallerInstallModuleEventObject
>;

export type InstallerInstallModuleEventFilter =
  TypedEventFilter<InstallerInstallModuleEvent>;

export interface InstallerSetGovernorAdminEventObject {
  newGovernorAdmin: string;
}
export type InstallerSetGovernorAdminEvent = TypedEvent<
  [string],
  InstallerSetGovernorAdminEventObject
>;

export type InstallerSetGovernorAdminEventFilter =
  TypedEventFilter<InstallerSetGovernorAdminEvent>;

export interface InstallerSetUpgradeAdminEventObject {
  newUpgradeAdmin: string;
}
export type InstallerSetUpgradeAdminEvent = TypedEvent<
  [string],
  InstallerSetUpgradeAdminEventObject
>;

export type InstallerSetUpgradeAdminEventFilter =
  TypedEventFilter<InstallerSetUpgradeAdminEvent>;

export interface LiquidationEventObject {
  liquidator: string;
  violator: string;
  underlying: string;
  collateral: string;
  repay: BigNumber;
  yield: BigNumber;
  healthScore: BigNumber;
  baseDiscount: BigNumber;
  discount: BigNumber;
}
export type LiquidationEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  LiquidationEventObject
>;

export type LiquidationEventFilter = TypedEventFilter<LiquidationEvent>;

export interface MarketActivatedEventObject {
  underlying: string;
  eToken: string;
  dToken: string;
}
export type MarketActivatedEvent = TypedEvent<
  [string, string, string],
  MarketActivatedEventObject
>;

export type MarketActivatedEventFilter = TypedEventFilter<MarketActivatedEvent>;

export interface PTokenActivatedEventObject {
  underlying: string;
  pToken: string;
}
export type PTokenActivatedEvent = TypedEvent<
  [string, string],
  PTokenActivatedEventObject
>;

export type PTokenActivatedEventFilter = TypedEventFilter<PTokenActivatedEvent>;

export interface PTokenUnWrapEventObject {
  underlying: string;
  account: string;
  amount: BigNumber;
}
export type PTokenUnWrapEvent = TypedEvent<
  [string, string, BigNumber],
  PTokenUnWrapEventObject
>;

export type PTokenUnWrapEventFilter = TypedEventFilter<PTokenUnWrapEvent>;

export interface PTokenWrapEventObject {
  underlying: string;
  account: string;
  amount: BigNumber;
}
export type PTokenWrapEvent = TypedEvent<
  [string, string, BigNumber],
  PTokenWrapEventObject
>;

export type PTokenWrapEventFilter = TypedEventFilter<PTokenWrapEvent>;

export interface ProxyCreatedEventObject {
  proxy: string;
  moduleId: BigNumber;
}
export type ProxyCreatedEvent = TypedEvent<
  [string, BigNumber],
  ProxyCreatedEventObject
>;

export type ProxyCreatedEventFilter = TypedEventFilter<ProxyCreatedEvent>;

export interface RepayEventObject {
  underlying: string;
  account: string;
  amount: BigNumber;
}
export type RepayEvent = TypedEvent<
  [string, string, BigNumber],
  RepayEventObject
>;

export type RepayEventFilter = TypedEventFilter<RepayEvent>;

export interface RequestBorrowEventObject {
  account: string;
  amount: BigNumber;
}
export type RequestBorrowEvent = TypedEvent<
  [string, BigNumber],
  RequestBorrowEventObject
>;

export type RequestBorrowEventFilter = TypedEventFilter<RequestBorrowEvent>;

export interface RequestBurnEventObject {
  account: string;
  amount: BigNumber;
}
export type RequestBurnEvent = TypedEvent<
  [string, BigNumber],
  RequestBurnEventObject
>;

export type RequestBurnEventFilter = TypedEventFilter<RequestBurnEvent>;

export interface RequestDepositEventObject {
  account: string;
  amount: BigNumber;
}
export type RequestDepositEvent = TypedEvent<
  [string, BigNumber],
  RequestDepositEventObject
>;

export type RequestDepositEventFilter = TypedEventFilter<RequestDepositEvent>;

export interface RequestDonateEventObject {
  account: string;
  amount: BigNumber;
}
export type RequestDonateEvent = TypedEvent<
  [string, BigNumber],
  RequestDonateEventObject
>;

export type RequestDonateEventFilter = TypedEventFilter<RequestDonateEvent>;

export interface RequestLiquidateEventObject {
  liquidator: string;
  violator: string;
  underlying: string;
  collateral: string;
  repay: BigNumber;
  minYield: BigNumber;
}
export type RequestLiquidateEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber],
  RequestLiquidateEventObject
>;

export type RequestLiquidateEventFilter =
  TypedEventFilter<RequestLiquidateEvent>;

export interface RequestMintEventObject {
  account: string;
  amount: BigNumber;
}
export type RequestMintEvent = TypedEvent<
  [string, BigNumber],
  RequestMintEventObject
>;

export type RequestMintEventFilter = TypedEventFilter<RequestMintEvent>;

export interface RequestRepayEventObject {
  account: string;
  amount: BigNumber;
}
export type RequestRepayEvent = TypedEvent<
  [string, BigNumber],
  RequestRepayEventObject
>;

export type RequestRepayEventFilter = TypedEventFilter<RequestRepayEvent>;

export interface RequestSwapEventObject {
  accountIn: string;
  accountOut: string;
  underlyingIn: string;
  underlyingOut: string;
  amount: BigNumber;
  swapType: BigNumber;
}
export type RequestSwapEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber],
  RequestSwapEventObject
>;

export type RequestSwapEventFilter = TypedEventFilter<RequestSwapEvent>;

export interface RequestTransferDTokenEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type RequestTransferDTokenEvent = TypedEvent<
  [string, string, BigNumber],
  RequestTransferDTokenEventObject
>;

export type RequestTransferDTokenEventFilter =
  TypedEventFilter<RequestTransferDTokenEvent>;

export interface RequestTransferETokenEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type RequestTransferETokenEvent = TypedEvent<
  [string, string, BigNumber],
  RequestTransferETokenEventObject
>;

export type RequestTransferETokenEventFilter =
  TypedEventFilter<RequestTransferETokenEvent>;

export interface RequestWithdrawEventObject {
  account: string;
  amount: BigNumber;
}
export type RequestWithdrawEvent = TypedEvent<
  [string, BigNumber],
  RequestWithdrawEventObject
>;

export type RequestWithdrawEventFilter = TypedEventFilter<RequestWithdrawEvent>;

export interface TrackAverageLiquidityEventObject {
  account: string;
}
export type TrackAverageLiquidityEvent = TypedEvent<
  [string],
  TrackAverageLiquidityEventObject
>;

export type TrackAverageLiquidityEventFilter =
  TypedEventFilter<TrackAverageLiquidityEvent>;

export interface UnTrackAverageLiquidityEventObject {
  account: string;
}
export type UnTrackAverageLiquidityEvent = TypedEvent<
  [string],
  UnTrackAverageLiquidityEventObject
>;

export type UnTrackAverageLiquidityEventFilter =
  TypedEventFilter<UnTrackAverageLiquidityEvent>;

export interface WithdrawEventObject {
  underlying: string;
  account: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Markets extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateMarket(
      underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    activatePToken(
      underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dTokenToUnderlying(
      dToken: string,
      overrides?: CallOverrides
    ): Promise<[string] & { underlying: string }>;

    eTokenToDToken(
      eToken: string,
      overrides?: CallOverrides
    ): Promise<[string] & { dTokenAddr: string }>;

    eTokenToUnderlying(
      eToken: string,
      overrides?: CallOverrides
    ): Promise<[string] & { underlying: string }>;

    enterMarket(
      subAccountId: BigNumberish,
      newMarket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitMarket(
      subAccountId: BigNumberish,
      oldMarket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getChainlinkPriceFeedConfig(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<[string] & { chainlinkAggregator: string }>;

    getEnteredMarkets(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getPricingConfig(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, string] & {
        pricingType: number;
        pricingParameters: number;
        pricingForwarded: string;
      }
    >;

    interestAccumulator(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    interestRate(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    interestRateModel(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    moduleGitCommit(overrides?: CallOverrides): Promise<[string]>;

    moduleId(overrides?: CallOverrides): Promise<[BigNumber]>;

    reserveFee(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    underlyingToAssetConfig(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<[Storage.AssetConfigStructOutput]>;

    underlyingToAssetConfigUnresolved(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<
      [Storage.AssetConfigStructOutput] & {
        config: Storage.AssetConfigStructOutput;
      }
    >;

    underlyingToDToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    underlyingToEToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    underlyingToPToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  activateMarket(
    underlying: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  activatePToken(
    underlying: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dTokenToUnderlying(
    dToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  eTokenToDToken(eToken: string, overrides?: CallOverrides): Promise<string>;

  eTokenToUnderlying(
    eToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  enterMarket(
    subAccountId: BigNumberish,
    newMarket: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitMarket(
    subAccountId: BigNumberish,
    oldMarket: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getChainlinkPriceFeedConfig(
    underlying: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getEnteredMarkets(
    account: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getPricingConfig(
    underlying: string,
    overrides?: CallOverrides
  ): Promise<
    [number, number, string] & {
      pricingType: number;
      pricingParameters: number;
      pricingForwarded: string;
    }
  >;

  interestAccumulator(
    underlying: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  interestRate(
    underlying: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  interestRateModel(
    underlying: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  moduleGitCommit(overrides?: CallOverrides): Promise<string>;

  moduleId(overrides?: CallOverrides): Promise<BigNumber>;

  reserveFee(underlying: string, overrides?: CallOverrides): Promise<number>;

  underlyingToAssetConfig(
    underlying: string,
    overrides?: CallOverrides
  ): Promise<Storage.AssetConfigStructOutput>;

  underlyingToAssetConfigUnresolved(
    underlying: string,
    overrides?: CallOverrides
  ): Promise<Storage.AssetConfigStructOutput>;

  underlyingToDToken(
    underlying: string,
    overrides?: CallOverrides
  ): Promise<string>;

  underlyingToEToken(
    underlying: string,
    overrides?: CallOverrides
  ): Promise<string>;

  underlyingToPToken(
    underlying: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    activateMarket(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<string>;

    activatePToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<string>;

    dTokenToUnderlying(
      dToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    eTokenToDToken(eToken: string, overrides?: CallOverrides): Promise<string>;

    eTokenToUnderlying(
      eToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    enterMarket(
      subAccountId: BigNumberish,
      newMarket: string,
      overrides?: CallOverrides
    ): Promise<void>;

    exitMarket(
      subAccountId: BigNumberish,
      oldMarket: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getChainlinkPriceFeedConfig(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getEnteredMarkets(
      account: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getPricingConfig(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, string] & {
        pricingType: number;
        pricingParameters: number;
        pricingForwarded: string;
      }
    >;

    interestAccumulator(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestRate(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestRateModel(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moduleGitCommit(overrides?: CallOverrides): Promise<string>;

    moduleId(overrides?: CallOverrides): Promise<BigNumber>;

    reserveFee(underlying: string, overrides?: CallOverrides): Promise<number>;

    underlyingToAssetConfig(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<Storage.AssetConfigStructOutput>;

    underlyingToAssetConfigUnresolved(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<Storage.AssetConfigStructOutput>;

    underlyingToDToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<string>;

    underlyingToEToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<string>;

    underlyingToPToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AssetStatus(address,uint256,uint256,uint96,uint256,uint256,int96,uint256)"(
      underlying?: string | null,
      totalBalances?: null,
      totalBorrows?: null,
      reserveBalance?: null,
      poolSize?: null,
      interestAccumulator?: null,
      interestRate?: null,
      timestamp?: null
    ): AssetStatusEventFilter;
    AssetStatus(
      underlying?: string | null,
      totalBalances?: null,
      totalBorrows?: null,
      reserveBalance?: null,
      poolSize?: null,
      interestAccumulator?: null,
      interestRate?: null,
      timestamp?: null
    ): AssetStatusEventFilter;

    "Borrow(address,address,uint256)"(
      underlying?: string | null,
      account?: string | null,
      amount?: null
    ): BorrowEventFilter;
    Borrow(
      underlying?: string | null,
      account?: string | null,
      amount?: null
    ): BorrowEventFilter;

    "DelegateAverageLiquidity(address,address)"(
      account?: string | null,
      delegate?: string | null
    ): DelegateAverageLiquidityEventFilter;
    DelegateAverageLiquidity(
      account?: string | null,
      delegate?: string | null
    ): DelegateAverageLiquidityEventFilter;

    "Deposit(address,address,uint256)"(
      underlying?: string | null,
      account?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      underlying?: string | null,
      account?: string | null,
      amount?: null
    ): DepositEventFilter;

    "EnterMarket(address,address)"(
      underlying?: string | null,
      account?: string | null
    ): EnterMarketEventFilter;
    EnterMarket(
      underlying?: string | null,
      account?: string | null
    ): EnterMarketEventFilter;

    "ExitMarket(address,address)"(
      underlying?: string | null,
      account?: string | null
    ): ExitMarketEventFilter;
    ExitMarket(
      underlying?: string | null,
      account?: string | null
    ): ExitMarketEventFilter;

    "Genesis()"(): GenesisEventFilter;
    Genesis(): GenesisEventFilter;

    "GovConvertReserves(address,address,uint256)"(
      underlying?: string | null,
      recipient?: string | null,
      amount?: null
    ): GovConvertReservesEventFilter;
    GovConvertReserves(
      underlying?: string | null,
      recipient?: string | null,
      amount?: null
    ): GovConvertReservesEventFilter;

    "GovSetAssetConfig(address,tuple)"(
      underlying?: string | null,
      newConfig?: null
    ): GovSetAssetConfigEventFilter;
    GovSetAssetConfig(
      underlying?: string | null,
      newConfig?: null
    ): GovSetAssetConfigEventFilter;

    "GovSetChainlinkPriceFeed(address,address)"(
      underlying?: string | null,
      chainlinkAggregator?: null
    ): GovSetChainlinkPriceFeedEventFilter;
    GovSetChainlinkPriceFeed(
      underlying?: string | null,
      chainlinkAggregator?: null
    ): GovSetChainlinkPriceFeedEventFilter;

    "GovSetIRM(address,uint256,bytes)"(
      underlying?: string | null,
      interestRateModel?: null,
      resetParams?: null
    ): GovSetIRMEventFilter;
    GovSetIRM(
      underlying?: string | null,
      interestRateModel?: null,
      resetParams?: null
    ): GovSetIRMEventFilter;

    "GovSetPricingConfig(address,uint16,uint32)"(
      underlying?: string | null,
      newPricingType?: null,
      newPricingParameter?: null
    ): GovSetPricingConfigEventFilter;
    GovSetPricingConfig(
      underlying?: string | null,
      newPricingType?: null,
      newPricingParameter?: null
    ): GovSetPricingConfigEventFilter;

    "GovSetReserveFee(address,uint32)"(
      underlying?: string | null,
      newReserveFee?: null
    ): GovSetReserveFeeEventFilter;
    GovSetReserveFee(
      underlying?: string | null,
      newReserveFee?: null
    ): GovSetReserveFeeEventFilter;

    "InstallerInstallModule(uint256,address,bytes32)"(
      moduleId?: BigNumberish | null,
      moduleImpl?: string | null,
      moduleGitCommit?: null
    ): InstallerInstallModuleEventFilter;
    InstallerInstallModule(
      moduleId?: BigNumberish | null,
      moduleImpl?: string | null,
      moduleGitCommit?: null
    ): InstallerInstallModuleEventFilter;

    "InstallerSetGovernorAdmin(address)"(
      newGovernorAdmin?: string | null
    ): InstallerSetGovernorAdminEventFilter;
    InstallerSetGovernorAdmin(
      newGovernorAdmin?: string | null
    ): InstallerSetGovernorAdminEventFilter;

    "InstallerSetUpgradeAdmin(address)"(
      newUpgradeAdmin?: string | null
    ): InstallerSetUpgradeAdminEventFilter;
    InstallerSetUpgradeAdmin(
      newUpgradeAdmin?: string | null
    ): InstallerSetUpgradeAdminEventFilter;

    "Liquidation(address,address,address,address,uint256,uint256,uint256,uint256,uint256)"(
      liquidator?: string | null,
      violator?: string | null,
      underlying?: string | null,
      collateral?: null,
      repay?: null,
      _yield?: null,
      healthScore?: null,
      baseDiscount?: null,
      discount?: null
    ): LiquidationEventFilter;
    Liquidation(
      liquidator?: string | null,
      violator?: string | null,
      underlying?: string | null,
      collateral?: null,
      repay?: null,
      _yield?: null,
      healthScore?: null,
      baseDiscount?: null,
      discount?: null
    ): LiquidationEventFilter;

    "MarketActivated(address,address,address)"(
      underlying?: string | null,
      eToken?: string | null,
      dToken?: string | null
    ): MarketActivatedEventFilter;
    MarketActivated(
      underlying?: string | null,
      eToken?: string | null,
      dToken?: string | null
    ): MarketActivatedEventFilter;

    "PTokenActivated(address,address)"(
      underlying?: string | null,
      pToken?: string | null
    ): PTokenActivatedEventFilter;
    PTokenActivated(
      underlying?: string | null,
      pToken?: string | null
    ): PTokenActivatedEventFilter;

    "PTokenUnWrap(address,address,uint256)"(
      underlying?: string | null,
      account?: string | null,
      amount?: null
    ): PTokenUnWrapEventFilter;
    PTokenUnWrap(
      underlying?: string | null,
      account?: string | null,
      amount?: null
    ): PTokenUnWrapEventFilter;

    "PTokenWrap(address,address,uint256)"(
      underlying?: string | null,
      account?: string | null,
      amount?: null
    ): PTokenWrapEventFilter;
    PTokenWrap(
      underlying?: string | null,
      account?: string | null,
      amount?: null
    ): PTokenWrapEventFilter;

    "ProxyCreated(address,uint256)"(
      proxy?: string | null,
      moduleId?: null
    ): ProxyCreatedEventFilter;
    ProxyCreated(
      proxy?: string | null,
      moduleId?: null
    ): ProxyCreatedEventFilter;

    "Repay(address,address,uint256)"(
      underlying?: string | null,
      account?: string | null,
      amount?: null
    ): RepayEventFilter;
    Repay(
      underlying?: string | null,
      account?: string | null,
      amount?: null
    ): RepayEventFilter;

    "RequestBorrow(address,uint256)"(
      account?: string | null,
      amount?: null
    ): RequestBorrowEventFilter;
    RequestBorrow(
      account?: string | null,
      amount?: null
    ): RequestBorrowEventFilter;

    "RequestBurn(address,uint256)"(
      account?: string | null,
      amount?: null
    ): RequestBurnEventFilter;
    RequestBurn(account?: string | null, amount?: null): RequestBurnEventFilter;

    "RequestDeposit(address,uint256)"(
      account?: string | null,
      amount?: null
    ): RequestDepositEventFilter;
    RequestDeposit(
      account?: string | null,
      amount?: null
    ): RequestDepositEventFilter;

    "RequestDonate(address,uint256)"(
      account?: string | null,
      amount?: null
    ): RequestDonateEventFilter;
    RequestDonate(
      account?: string | null,
      amount?: null
    ): RequestDonateEventFilter;

    "RequestLiquidate(address,address,address,address,uint256,uint256)"(
      liquidator?: string | null,
      violator?: string | null,
      underlying?: string | null,
      collateral?: null,
      repay?: null,
      minYield?: null
    ): RequestLiquidateEventFilter;
    RequestLiquidate(
      liquidator?: string | null,
      violator?: string | null,
      underlying?: string | null,
      collateral?: null,
      repay?: null,
      minYield?: null
    ): RequestLiquidateEventFilter;

    "RequestMint(address,uint256)"(
      account?: string | null,
      amount?: null
    ): RequestMintEventFilter;
    RequestMint(account?: string | null, amount?: null): RequestMintEventFilter;

    "RequestRepay(address,uint256)"(
      account?: string | null,
      amount?: null
    ): RequestRepayEventFilter;
    RequestRepay(
      account?: string | null,
      amount?: null
    ): RequestRepayEventFilter;

    "RequestSwap(address,address,address,address,uint256,uint256)"(
      accountIn?: string | null,
      accountOut?: string | null,
      underlyingIn?: string | null,
      underlyingOut?: null,
      amount?: null,
      swapType?: null
    ): RequestSwapEventFilter;
    RequestSwap(
      accountIn?: string | null,
      accountOut?: string | null,
      underlyingIn?: string | null,
      underlyingOut?: null,
      amount?: null,
      swapType?: null
    ): RequestSwapEventFilter;

    "RequestTransferDToken(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): RequestTransferDTokenEventFilter;
    RequestTransferDToken(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): RequestTransferDTokenEventFilter;

    "RequestTransferEToken(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): RequestTransferETokenEventFilter;
    RequestTransferEToken(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): RequestTransferETokenEventFilter;

    "RequestWithdraw(address,uint256)"(
      account?: string | null,
      amount?: null
    ): RequestWithdrawEventFilter;
    RequestWithdraw(
      account?: string | null,
      amount?: null
    ): RequestWithdrawEventFilter;

    "TrackAverageLiquidity(address)"(
      account?: string | null
    ): TrackAverageLiquidityEventFilter;
    TrackAverageLiquidity(
      account?: string | null
    ): TrackAverageLiquidityEventFilter;

    "UnTrackAverageLiquidity(address)"(
      account?: string | null
    ): UnTrackAverageLiquidityEventFilter;
    UnTrackAverageLiquidity(
      account?: string | null
    ): UnTrackAverageLiquidityEventFilter;

    "Withdraw(address,address,uint256)"(
      underlying?: string | null,
      account?: string | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      underlying?: string | null,
      account?: string | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    activateMarket(
      underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    activatePToken(
      underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dTokenToUnderlying(
      dToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eTokenToDToken(
      eToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eTokenToUnderlying(
      eToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enterMarket(
      subAccountId: BigNumberish,
      newMarket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitMarket(
      subAccountId: BigNumberish,
      oldMarket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getChainlinkPriceFeedConfig(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEnteredMarkets(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPricingConfig(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestAccumulator(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestRate(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestRateModel(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moduleGitCommit(overrides?: CallOverrides): Promise<BigNumber>;

    moduleId(overrides?: CallOverrides): Promise<BigNumber>;

    reserveFee(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingToAssetConfig(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingToAssetConfigUnresolved(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingToDToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingToEToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingToPToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activateMarket(
      underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    activatePToken(
      underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dTokenToUnderlying(
      dToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eTokenToDToken(
      eToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eTokenToUnderlying(
      eToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enterMarket(
      subAccountId: BigNumberish,
      newMarket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitMarket(
      subAccountId: BigNumberish,
      oldMarket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getChainlinkPriceFeedConfig(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEnteredMarkets(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPricingConfig(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interestAccumulator(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interestRate(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interestRateModel(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moduleGitCommit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moduleId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveFee(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingToAssetConfig(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingToAssetConfigUnresolved(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingToDToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingToEToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingToPToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
