/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace EulerLensV1 {
  export type QueryStruct = {
    eulerContract: string;
    account: string;
    markets: string[];
  };

  export type QueryStructOutput = [string, string, string[]] & {
    eulerContract: string;
    account: string;
    markets: string[];
  };

  export type OverrideStruct = {
    underlying: string;
    collateralFactor: BigNumberish;
  };

  export type OverrideStructOutput = [string, number] & {
    underlying: string;
    collateralFactor: number;
  };

  export type ResponseMarketStruct = {
    underlying: string;
    name: string;
    symbol: string;
    decimals: BigNumberish;
    eTokenAddr: string;
    dTokenAddr: string;
    pTokenAddr: string;
    config: Storage.AssetConfigStruct;
    poolSize: BigNumberish;
    totalBalances: BigNumberish;
    totalBorrows: BigNumberish;
    reserveBalance: BigNumberish;
    reserveFee: BigNumberish;
    borrowAPY: BigNumberish;
    supplyAPY: BigNumberish;
    twap: BigNumberish;
    twapPeriod: BigNumberish;
    currPrice: BigNumberish;
    pricingType: BigNumberish;
    pricingParameters: BigNumberish;
    pricingForwarded: string;
    underlyingBalance: BigNumberish;
    eulerAllowance: BigNumberish;
    eTokenBalance: BigNumberish;
    eTokenBalanceUnderlying: BigNumberish;
    dTokenBalance: BigNumberish;
    liquidityStatus: IRiskManager.LiquidityStatusStruct;
    overrideLiabilities: EulerLensV1.OverrideStruct[];
    overrideCollaterals: EulerLensV1.OverrideStruct[];
  };

  export type ResponseMarketStructOutput = [
    string,
    string,
    string,
    number,
    string,
    string,
    string,
    Storage.AssetConfigStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    IRiskManager.LiquidityStatusStructOutput,
    EulerLensV1.OverrideStructOutput[],
    EulerLensV1.OverrideStructOutput[]
  ] & {
    underlying: string;
    name: string;
    symbol: string;
    decimals: number;
    eTokenAddr: string;
    dTokenAddr: string;
    pTokenAddr: string;
    config: Storage.AssetConfigStructOutput;
    poolSize: BigNumber;
    totalBalances: BigNumber;
    totalBorrows: BigNumber;
    reserveBalance: BigNumber;
    reserveFee: number;
    borrowAPY: BigNumber;
    supplyAPY: BigNumber;
    twap: BigNumber;
    twapPeriod: BigNumber;
    currPrice: BigNumber;
    pricingType: number;
    pricingParameters: number;
    pricingForwarded: string;
    underlyingBalance: BigNumber;
    eulerAllowance: BigNumber;
    eTokenBalance: BigNumber;
    eTokenBalanceUnderlying: BigNumber;
    dTokenBalance: BigNumber;
    liquidityStatus: IRiskManager.LiquidityStatusStructOutput;
    overrideLiabilities: EulerLensV1.OverrideStructOutput[];
    overrideCollaterals: EulerLensV1.OverrideStructOutput[];
  };

  export type ResponseStruct = {
    timestamp: BigNumberish;
    blockNumber: BigNumberish;
    markets: EulerLensV1.ResponseMarketStruct[];
    enteredMarkets: string[];
  };

  export type ResponseStructOutput = [
    BigNumber,
    BigNumber,
    EulerLensV1.ResponseMarketStructOutput[],
    string[]
  ] & {
    timestamp: BigNumber;
    blockNumber: BigNumber;
    markets: EulerLensV1.ResponseMarketStructOutput[];
    enteredMarkets: string[];
  };

  export type ResponseAccountLiquidityStruct = {
    markets: IRiskManager.AssetLiquidityStruct[];
  };

  export type ResponseAccountLiquidityStructOutput = [
    IRiskManager.AssetLiquidityStructOutput[]
  ] & { markets: IRiskManager.AssetLiquidityStructOutput[] };

  export type QueryIRMStruct = { eulerContract: string; underlying: string };

  export type QueryIRMStructOutput = [string, string] & {
    eulerContract: string;
    underlying: string;
  };

  export type ResponseIRMStruct = {
    kink: BigNumberish;
    baseAPY: BigNumberish;
    kinkAPY: BigNumberish;
    maxAPY: BigNumberish;
    baseSupplyAPY: BigNumberish;
    kinkSupplyAPY: BigNumberish;
    maxSupplyAPY: BigNumberish;
  };

  export type ResponseIRMStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    kink: BigNumber;
    baseAPY: BigNumber;
    kinkAPY: BigNumber;
    maxAPY: BigNumber;
    baseSupplyAPY: BigNumber;
    kinkSupplyAPY: BigNumber;
    maxSupplyAPY: BigNumber;
  };
}

export declare namespace Storage {
  export type AssetConfigStruct = {
    eTokenAddress: string;
    borrowIsolated: boolean;
    collateralFactor: BigNumberish;
    borrowFactor: BigNumberish;
    twapWindow: BigNumberish;
  };

  export type AssetConfigStructOutput = [
    string,
    boolean,
    number,
    number,
    number
  ] & {
    eTokenAddress: string;
    borrowIsolated: boolean;
    collateralFactor: number;
    borrowFactor: number;
    twapWindow: number;
  };
}

export declare namespace IRiskManager {
  export type LiquidityStatusStruct = {
    collateralValue: BigNumberish;
    liabilityValue: BigNumberish;
    numBorrows: BigNumberish;
    borrowIsolated: boolean;
    overrideCollateralValue: BigNumberish;
  };

  export type LiquidityStatusStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    collateralValue: BigNumber;
    liabilityValue: BigNumber;
    numBorrows: BigNumber;
    borrowIsolated: boolean;
    overrideCollateralValue: BigNumber;
  };

  export type AssetLiquidityStruct = {
    underlying: string;
    status: IRiskManager.LiquidityStatusStruct;
  };

  export type AssetLiquidityStructOutput = [
    string,
    IRiskManager.LiquidityStatusStructOutput
  ] & { underlying: string; status: IRiskManager.LiquidityStatusStructOutput };
}

export interface EulerLensV1Interface extends utils.Interface {
  functions: {
    "computeAPYs(uint256,uint256,uint256,uint32)": FunctionFragment;
    "doQuery((address,address,address[]))": FunctionFragment;
    "doQueryAccountLiquidity(address,address[])": FunctionFragment;
    "doQueryBatch((address,address,address[])[])": FunctionFragment;
    "doQueryIRM((address,address))": FunctionFragment;
    "moduleGitCommit()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "computeAPYs"
      | "doQuery"
      | "doQueryAccountLiquidity"
      | "doQueryBatch"
      | "doQueryIRM"
      | "moduleGitCommit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "computeAPYs",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doQuery",
    values: [EulerLensV1.QueryStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "doQueryAccountLiquidity",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "doQueryBatch",
    values: [EulerLensV1.QueryStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "doQueryIRM",
    values: [EulerLensV1.QueryIRMStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "moduleGitCommit",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "computeAPYs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "doQuery", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "doQueryAccountLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doQueryBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "doQueryIRM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moduleGitCommit",
    data: BytesLike
  ): Result;

  events: {};
}

export interface EulerLensV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EulerLensV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    computeAPYs(
      borrowSPY: BigNumberish,
      totalBorrows: BigNumberish,
      totalBalancesUnderlying: BigNumberish,
      reserveFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { borrowAPY: BigNumber; supplyAPY: BigNumber }
    >;

    doQuery(
      q: EulerLensV1.QueryStruct,
      overrides?: CallOverrides
    ): Promise<
      [EulerLensV1.ResponseStructOutput] & {
        r: EulerLensV1.ResponseStructOutput;
      }
    >;

    doQueryAccountLiquidity(
      eulerContract: string,
      addrs: string[],
      overrides?: CallOverrides
    ): Promise<
      [EulerLensV1.ResponseAccountLiquidityStructOutput[]] & {
        r: EulerLensV1.ResponseAccountLiquidityStructOutput[];
      }
    >;

    doQueryBatch(
      qs: EulerLensV1.QueryStruct[],
      overrides?: CallOverrides
    ): Promise<
      [EulerLensV1.ResponseStructOutput[]] & {
        r: EulerLensV1.ResponseStructOutput[];
      }
    >;

    doQueryIRM(
      q: EulerLensV1.QueryIRMStruct,
      overrides?: CallOverrides
    ): Promise<
      [EulerLensV1.ResponseIRMStructOutput] & {
        r: EulerLensV1.ResponseIRMStructOutput;
      }
    >;

    moduleGitCommit(overrides?: CallOverrides): Promise<[string]>;
  };

  computeAPYs(
    borrowSPY: BigNumberish,
    totalBorrows: BigNumberish,
    totalBalancesUnderlying: BigNumberish,
    reserveFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { borrowAPY: BigNumber; supplyAPY: BigNumber }
  >;

  doQuery(
    q: EulerLensV1.QueryStruct,
    overrides?: CallOverrides
  ): Promise<EulerLensV1.ResponseStructOutput>;

  doQueryAccountLiquidity(
    eulerContract: string,
    addrs: string[],
    overrides?: CallOverrides
  ): Promise<EulerLensV1.ResponseAccountLiquidityStructOutput[]>;

  doQueryBatch(
    qs: EulerLensV1.QueryStruct[],
    overrides?: CallOverrides
  ): Promise<EulerLensV1.ResponseStructOutput[]>;

  doQueryIRM(
    q: EulerLensV1.QueryIRMStruct,
    overrides?: CallOverrides
  ): Promise<EulerLensV1.ResponseIRMStructOutput>;

  moduleGitCommit(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    computeAPYs(
      borrowSPY: BigNumberish,
      totalBorrows: BigNumberish,
      totalBalancesUnderlying: BigNumberish,
      reserveFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { borrowAPY: BigNumber; supplyAPY: BigNumber }
    >;

    doQuery(
      q: EulerLensV1.QueryStruct,
      overrides?: CallOverrides
    ): Promise<EulerLensV1.ResponseStructOutput>;

    doQueryAccountLiquidity(
      eulerContract: string,
      addrs: string[],
      overrides?: CallOverrides
    ): Promise<EulerLensV1.ResponseAccountLiquidityStructOutput[]>;

    doQueryBatch(
      qs: EulerLensV1.QueryStruct[],
      overrides?: CallOverrides
    ): Promise<EulerLensV1.ResponseStructOutput[]>;

    doQueryIRM(
      q: EulerLensV1.QueryIRMStruct,
      overrides?: CallOverrides
    ): Promise<EulerLensV1.ResponseIRMStructOutput>;

    moduleGitCommit(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    computeAPYs(
      borrowSPY: BigNumberish,
      totalBorrows: BigNumberish,
      totalBalancesUnderlying: BigNumberish,
      reserveFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    doQuery(
      q: EulerLensV1.QueryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    doQueryAccountLiquidity(
      eulerContract: string,
      addrs: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    doQueryBatch(
      qs: EulerLensV1.QueryStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    doQueryIRM(
      q: EulerLensV1.QueryIRMStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moduleGitCommit(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    computeAPYs(
      borrowSPY: BigNumberish,
      totalBorrows: BigNumberish,
      totalBalancesUnderlying: BigNumberish,
      reserveFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    doQuery(
      q: EulerLensV1.QueryStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    doQueryAccountLiquidity(
      eulerContract: string,
      addrs: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    doQueryBatch(
      qs: EulerLensV1.QueryStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    doQueryIRM(
      q: EulerLensV1.QueryIRMStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moduleGitCommit(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
